import torchaudio
from audiocraft.models import MusicGen

def main():
    # Charger le mod√®le de base (small = rapide, bon pour tester)
    model = MusicGen.get_pretrained("facebook/musicgen-small")
    model.set_generation_params(duration=5)  # dur√©e en secondes

    # Texte de test
    descriptions = ["A happy pop melody with piano and guitar"]

    print("üé∂ G√©n√©ration en cours...")
    wav = model.generate(descriptions)

    # Sauvegarde du r√©sultat en .wav
    torchaudio.save("test_output.wav", wav[0].cpu(), 32000)
    print("‚úÖ Fichier g√©n√©r√© : test_output.wav")

if __name__ == "__main__":
    main()
from audiocraft.models import MusicGen
import torchaudio

# Charger le mod√®le l√©ger (rapide, id√©al pour tester)
model = MusicGen.get_pretrained("facebook/musicgen-small")

# Param√®tres : dur√©e du clip en secondes
model.set_generation_params(duration=8)

# Texte descriptif
descriptions = ["A happy pop melody with piano and claps"]

# G√©n√©rer
print("‚è≥ G√©n√©ration en cours...")
wav = model.generate(descriptions)

# Sauvegarde en WAV
torchaudio.save("test_output.wav", wav[0].cpu(), 32000)

print("‚úÖ Fichier g√©n√©r√© : test_output.wav")
from audiocraft.models import MusicGen
import torchaudio

# Charger un mod√®le l√©ger (petit = plus rapide en CPU)
model = MusicGen.get_pretrained("facebook/musicgen-small")

# Dur√©e de la g√©n√©ration (en secondes)
model.set_generation_params(duration=8)

# Description textuelle
descriptions = ["A happy pop melody with piano and claps"]

# G√©n√©ration
wav = model.generate(descriptions)

# Sauvegarde en .wav
torchaudio.save("test_output.wav", wav[0].cpu(), 32000)

print("‚úÖ Fichier g√©n√©r√© : test_output.wav")
import torchaudio
from audiocraft.models import MusicGen

def main():
    # Charger le mod√®le de base
    model = MusicGen.get_pretrained("facebook/musicgen-small")
    model.set_generation_params(duration=5)  # 5 secondes d'audio

    # Texte de test
    descriptions = ["A happy pop melody with piano and guitar"]

    print("üé∂ G√©n√©ration en cours...")
    wav = model.generate(descriptions)

    # Sauvegarde du r√©sultat en .wav
    torchaudio.save("test_output.wav", wav[0].cpu(), 32000)
    print("‚úÖ Fichier g√©n√©r√© : test_output.wav")

if __name__ == "__main__":
    main()

